from datetime import datetime, timedelta
import itertools
from urllib.parse import urlencode

def generate_date_range(start_date, end_date):
    """
    Generate a list of YYYY-MM-DD strings between start_date and end_date (inclusive).
    """
    start = datetime.strptime(start_date, "%Y-%m-%d")
    end = datetime.strptime(end_date, "%Y-%m-%d")
    delta = (end - start).days
    return [(start + timedelta(days=i)).strftime("%Y-%m-%d") for i in range(delta + 1)]

def generate_all_urls(base_url, start_date, end_date, legal_entities, source_systems, product_types):
    """
    Generate all combinations of (date, legal_entity, source_system, product_type) URLs.
    """
    date_list = generate_date_range(start_date, end_date)
    urls = []

    for date, le, ss, pt in itertools.product(date_list, legal_entities, source_systems, product_types):
        params = {
            "date": date,
            "legalEntity": le,
            "sourceSystem": ss,
            "productType": pt
        }
        url = f"{base_url}?{urlencode(params)}"
        urls.append(url)
    
    return urls


def fetch_data(url):
    """
    Fetches data from the generated URL.
    """
    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()  # or .text or .content based on API
    except Exception as e:
        print(f"Error fetching data: {e}")
        return None

base_url = "https://api.example.com/fetchData"

start_date = "2024-01-01"
end_date = "2024-12-31"
legal_entities = ["HBSG", "XYZC"]
source_systems = ["Murex", "Calypso"]
product_types = ["FX", "Derivatives"]

url = generate_url(base_url, start_date, end_date, legal_entities, source_systems, product_types)
print("Generated URL:", url)

data = fetch_data(url)

