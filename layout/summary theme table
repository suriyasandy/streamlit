# Group by reasoncodeid and Date only (total across HighLevelCodes)
summary = (
    result_df.groupby(['reasoncodeid', 'Date'])
    .size()
    .reset_index(name='total_count')
)

# 1. Make sure all column names are strings
summary_pivot.columns = [str(col) for col in summary_pivot.columns]

# 2. Convert all data to object (JSON-safe types)
summary_pivot = summary_pivot.astype(object)

# 3. Reset index to ensure no complex indexes
summary_pivot = summary_pivot.reset_index(drop=True)

# 4. Display in AgGrid
from st_aggrid import AgGrid, GridOptionsBuilder

gb = GridOptionsBuilder.from_dataframe(summary_pivot)
gb.configure_selection('single')
grid_options = gb.build()

AgGrid(summary_pivot, gridOptions=grid_options)

# Get selected reasoncodeid
selected_row = grid_response['selected_rows']
if selected_row:
    selected_code = selected_row[0]['reasoncodeid']
    
    # Filter detail for selected reasoncodeid
    detail_df = result_df[result_df['reasoncodeid'] == selected_code]
    
    # Group by Date and HighLevelCode
    detail_grouped = (
        detail_df.groupby(['Date', 'HighLevelCode'])
        .size()
        .reset_index(name='count')
    )
# Calculate total across columns (excluding 'reasoncodeid')
totals = summary_pivot.drop(columns='reasoncodeid').sum(numeric_only=True)

# Create a row with 'Total' as the reasoncodeid
total_row = pd.DataFrame([['Total'] + totals.tolist()], columns=summary_pivot.columns)

# Append to the summary_pivot
summary_pivot_with_total = pd.concat([summary_pivot, total_row], ignore_index=True)

    # Pivot: Date as index, HighLevelCode as columns
    detail_pivot = detail_grouped.pivot(index='Date', columns='HighLevelCode', values='count').fillna(0).astype(int)

    st.subheader(f"Detail for: {selected_code}")
    st.dataframe(detail_pivot)
