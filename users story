üìù JIRA Story: GFX Threshold Analysis Dashboard UI

‚∏ª

Title:
Implement Streamlit-Based GFX Threshold Analysis Dashboard with Editable Thresholds and Dynamic Summary Drilldowns

‚∏ª

Description:
As a Market Middle Office Analyst,
I want a dynamic, interactive dashboard to manage and analyze threshold-based alerts for GFX trade data,
So that I can review, adjust, and track alert thresholds and their impact across legal entities, currencies, and risk categories.

‚∏ª

Acceptance Criteria:
	1.	Threshold Input Grid
	‚Ä¢	Display editable AgGrid table showing currencies and current thresholds.
	‚Ä¢	Allow user to edit threshold values inline.
	‚Ä¢	Edits should not be committed until the user clicks ‚ÄúApply Changes‚Äù.
	‚Ä¢	Upon confirmation, store the updated thresholds in session state and use in downstream analysis.
	2.	Summary Pivot Table
	‚Ä¢	Display a pivot-style summary table:
	‚Ä¢	Rows: reasoncodeid (themes)
	‚Ä¢	Columns: dates from selected date range
	‚Ä¢	Cells: trade alert counts
	‚Ä¢	Add a final row called "Total" that sums all columns.
	‚Ä¢	The total row should always stay at the bottom and not be affected by sorting.
	3.	Interactive Drilldown
	‚Ä¢	When a user selects a row in the summary table:
	‚Ä¢	Show a breakdown of trade counts by HighLevelCode under each date for the selected reasoncodeid.
	‚Ä¢	Allow the user to pick a specific column (date + code) to filter into finer-grain detail.
	4.	AgGrid Enhancements
	‚Ä¢	Wrap long column headers for clarity (e.g., 2024-06-24 | Risk).
	‚Ä¢	Adjust AgGrid height dynamically based on number of rows.
	‚Ä¢	Enable full-width column display.
	‚Ä¢	Apply consistent formatting and handle serialization for smooth rendering.
	5.	Table Clearing & Refresh
	‚Ä¢	Provide buttons to clear/reset tables when re-running threshold impact.
	‚Ä¢	Ensure previous selections or edits do not persist on reset.

‚∏ª

Technical Details:
	‚Ä¢	Built using Streamlit and streamlit-aggrid
	‚Ä¢	Uses GridUpdateMode.NO_UPDATE for safe staged editing
	‚Ä¢	Handles MultiIndex columns by flattening with string formatting
	‚Ä¢	Implements st.session_state to persist user inputs and changes

‚∏ª

Out of Scope (for this story):
	‚Ä¢	Backend API integration for threshold persistence
	‚Ä¢	Role-based access or multi-user view customization

‚∏ª

Attachments/References:
	‚Ä¢	UX Mockup: GFX Threshold Summary with Expandable Row Details (attached)
	‚Ä¢	Sample Data Format: reasoncodeid, Date, HighLevelCode, TradeCount

‚∏ª

Let me know if you want a subtasks breakdown (e.g., Frontend Grid, Summary Pivot, Drilldown View, Styling, Session State Handling, etc.) or want it aligned with a specific JIRA template.
