import streamlit as st
import pandas as pd
from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode

st.set_page_config(layout="wide")

st.title("üìä Group-wise Threshold Recalibration")

# Step 1: File Upload
uploaded_file = st.file_uploader("Upload Threshold File (.csv)", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)

    # Step 1: Take only unique rows for each Proposed_Group
    group_df = df[["Proposed_Group", "Existing_Threshold", "Proposed_Threshold"]].drop_duplicates()

    group_df = group_df.rename(columns={
        "Proposed_Group": "Group",
        "Existing_Threshold": "Existing Threshold",
        "Proposed_Threshold": "Proposed Threshold"
    })

    group_df["Final Threshold"] = group_df["Proposed Threshold"]

    # Step 2: Store in session_state for stateful editing
    if "group_thresholds" not in st.session_state:
        st.session_state.group_thresholds = group_df.copy()

    st.subheader("üìù Edit Final Thresholds (Group-Level)")

    gb = GridOptionsBuilder.from_dataframe(st.session_state.group_thresholds)
    gb.configure_column("Final Threshold", editable=True)
    gb.configure_column("Group", editable=False)
    gb.configure_column("Existing Threshold", editable=False)
    gb.configure_column("Proposed Threshold", editable=False)
    grid_options = gb.build()

    grid_response = AgGrid(
        st.session_state.group_thresholds,
        gridOptions=grid_options,
        update_mode=GridUpdateMode.VALUE_CHANGED,
        height=300,
        use_container_width=True,
        key="group_aggrid"
    )

    # Step 3: Update session state with any user edits
    st.session_state.group_thresholds = grid_response["data"]

    st.success("‚úÖ Final group thresholds updated successfully.")

    # Optional display
    if st.checkbox("üìÑ Show Current Final Threshold Table"):
        st.dataframe(st.session_state.group_thresholds)
